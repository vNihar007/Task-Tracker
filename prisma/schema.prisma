// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  Open
  InProgress 
  Completed
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  password      String
  createdTasks  Task[]          @relation("CreatedTasks")
  assignedTasks Task[]          @relation("AssignedTasks")
  comments      Comment[]
  projects      Project[]       @relation("CreatedProjects")
  memberships   ProjectMember[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  status      String        @default("TODO")

  creator     User          @relation("CreatedTasks", fields: [creatorId], references: [id])
  creatorId   Int

  assignee    User?         @relation("AssignedTasks", fields: [assignedTo], references: [id])
  assignedTo  Int?

  project     Project       @relation(fields: [projectId], references: [id])
  projectId   Int

  comments    Comment[]
  attachments Attachment[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?

  creator     User            @relation("CreatedProjects", fields: [creatorId], references: [id])
  creatorId   Int

  members     ProjectMember[]
  tasks       Task[]

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectMember {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  project   Project   @relation(fields: [projectId], references: [id])
  projectId Int
  role      String    @default("MEMBER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, projectId])
}

model Attachment {
  id        Int       @id @default(autoincrement())
  filename  String
  url       String
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
